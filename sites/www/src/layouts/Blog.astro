---
import { generateSocialImage } from '@jlengstorf/get-share-image';
import { OptInForm } from '../components/opt-in-form.solid';
import Layout from './Layout.astro';

const { frontmatter, headings } = Astro.props;
const url = Astro.url.toString();

const { title, description } = frontmatter;

const og: { title: string; description: string; image?: string } = {
	title: frontmatter.share?.title ?? title,
	description: frontmatter.share?.text ?? description,
};

og.image =
	frontmatter.share?.image ??
	generateSocialImage({
		title: og.title,
		tagline: og.description,
		cloudName: 'jlengstorf',
		imagePublicID: 'lwj/post-share-2022',
		titleColor: 'ffffff',
		titleFont: 'jwf.otf',
		titleFontSize: 55,
		taglineColor: 'ffffff',
		taglineFont: 'jwf-book.otf',
		taglineFontSize: 42,
		textLeftOffset: 392,
		titleBottomOffset: 340,
		taglineTopOffset: 375,
		textAreaWidth: 813,
	});

// TODO figure out max length for share image text and add an ellipsis to avoid overflow
---

<Layout title={title} mainClass="post-container">
	<Fragment slot="head-tags">
		<meta name="twitter:title" content={og.title} />

		<meta name="description" content={og.description} />
		<meta property="og:description" content={og.description} />
		<meta name="twitter:description" content={og.description} />

		<meta property="og:url" content={url} />

		<meta name="image" content={og.image} />
		<meta property="og:image" content={og.image} />
		<meta name="twitter:image" content={og.image} />

		<meta property="og:type" content="article" />
		<meta name="twitter:dnt" content="on" />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:creator" content="@LWJShow" />
		<script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"
		></script>
	</Fragment>
	<article class="post">
		<header>
			<h1>{title}</h1>
			<p>{description}</p>
		</header>
		<aside class="table-of-contents" data-section="table-of-contents">
			<div class="toc-sticky-container">
				<h2
					class="gradient-subheading gradient-underline"
					id="table-of-contents"
				>
					Table of Contents
				</h2>
				<ol class="gradient-underline">
					{
						headings.map(
							(heading: { depth: number; slug: string; text: string }) => {
								if (heading.depth > 2) {
									return null;
								}

								return (
									<li>
										<a href={`#${heading.slug}`}>{heading.text}</a>
									</li>
								);
							},
						)
					}
				</ol>
				<p class="sidebar-links">
					<a href="/newsletter">get updates</a>
					<a href="/blog/rss.xml">blog RSS</a>
				</p>
			</div>
		</aside>

		<div class="post-content" data-section="post-content"><slot /></div>

		{frontmatter.showOptin !== false ? <OptInForm /> : null}
	</article>
</Layout>

<script>
	function setActiveHeading() {
		const headingElements = document.querySelectorAll(
			'[data-section=post-content] h2',
		);

		const observerCallback: IntersectionObserverCallback = ([entry]) => {
			const activeHeading = entry.target;
			const links = Array.from(
				document.querySelectorAll('[data-section=table-of-contents] a'),
			);

			links.forEach((link) => {
				const [, href] = link.getAttribute('href')?.split('#') ?? '';

				if (entry.isIntersecting && href === activeHeading.id) {
					links.forEach((l) => l.classList.remove('active'));
					link.classList.add('active');
				}
			});
		};

		const observer = new IntersectionObserver(observerCallback, {
			threshold: [0.9],
		});

		Array.from(headingElements)
			.filter((h2) => h2.id !== 'table-of-contents')
			.map((h2) => {
				observer.observe(h2);

				return {
					label: h2.textContent,
					href: `#${h2.id}`,
				};
			});

		return () => {
			Array.from(headingElements).map((h2) => {
				observer.unobserve(h2);
			});
		};
	}

	setActiveHeading();
</script>

<style>
	:global(.post-container) {
		max-width: 51rem;
		margin: 3rem auto;
	}

	.post {
		padding: 0 5vw;
	}

	.post header,
	.post .post-content {
		grid-column-start: 2;
	}

	.post header p {
		font-size: 1.25rem;
		line-height: 1.75rem;
	}

	.post-content {
		margin-inline: 0;
		max-width: 100%;
		width: 100%;
	}

	.post .table-of-contents {
		display: none;
		grid-column-start: 1;
		grid-row-start: 2;
	}

	@media (min-width: 1000px) {
		.post {
			display: grid;
			gap: 4rem;
			grid-template-columns: 12rem 1fr;
			padding: 0;
		}

		.post-content {
			align-self: start;
			max-width: 53ch;
		}

		.post .table-of-contents {
			display: block;
		}
	}

	.table-of-contents .toc-sticky-container {
		position: sticky;
		top: 3rem;
	}

	.table-of-contents h2 {
		font-weight: 400;
		margin: 0 -0.25rem;
		padding: 0 0.25rem;
		text-align: left;
	}

	.table-of-contents ol {
		list-style: none;
		padding: 0;
		margin: 0.5rem 0 0;
		font-size: 0.75rem;
	}

	.table-of-contents li {
		margin: 0;
	}

	.table-of-contents a {
		border-left: 2px solid transparent;
		color: var(--color-gray-text-muted);
		display: block;
		line-height: 1rem;
		margin: 0 -0.25rem;
		padding: 0.5rem 0.25rem;
		text-decoration: none;
	}

	.table-of-contents a.active {
		background: var(--color-pink-faded);
		border-color: var(--color-pink-text);
	}

	.sidebar-links {
		color: var(--color-pink-text);
		display: flex;
		font-size: 0.625rem;
		gap: 1rem;
		letter-spacing: 0.2em;
		text-transform: uppercase;

		& a {
			color: inherit;
			margin-block: 0;

			&:hover,
			&:focus {
				text-decoration: underline;
			}
		}
	}
</style>
<style is:global>
	.post-content h2 {
		font-size: 1.5rem;
		scroll-padding-top: 2rem;
		text-align: left;
	}

	.post-content a {
		color: var(--color-blue-link-text);
		font-weight: inherit;
	}

	.post-content strong {
		color: var(--color-text-emphasized);
		font-weight: 600;
	}

	.post-content a strong {
		color: inherit;
	}

	.post-content pre {
		color: var(--color-white);
		background: var(--color-black);
		font-size: 1rem;
		margin: 2rem -5vw;
		padding: 1.5rem calc(5vw + 0.25rem);
	}

	@media (min-width: 1000px) {
		.post-content pre {
			border-radius: 0.125rem;
			margin-inline: -1rem;
			padding: 1.25rem;
		}
	}

	code {
		font-family: 'Operator Mono', Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono',
			monospace;
	}

	.post-figure {
		margin: 2rem max(-5vw, -2rem);

		& img {
			border-radius: 0.25rem 0.25rem 0 0;
			display: block;
			width: 100%;
		}

		&:not(:has(figcaption)) img {
			border-radius: 0.25rem;
		}

		& > * {
			display: block;
		}

		& p {
			margin: 0;
		}

		& figcaption {
			background: var(--color-black-faded-alpha);
			border-radius: 0 0 0.25rem 0.25rem;
			color: var(--color-white);
			font-size: 0.75rem;
			font-style: italic;
			margin: 0;
			padding: 0.375rem min(5vw, 2rem);

			& a {
				color: inherit;
			}
		}
		& blockquote + figcaption {
			background: transparent;
			color: var(--color-text-muted);
		}
	}

	.post-content :not(pre) > code {
		background: var(--color-gray-lightest);
		border: 1px solid var(--color-gray-lighter);
		border-radius: 0.125rem;
		line-height: 1;
		overflow-x: scroll;
		padding: 0.1rem 0.25rem;
		word-wrap: break-word;
	}

	.post-content .post-aside :not(pre) code {
		font-size: 0.875rem;
	}

	blockquote {
		border-inline-start: 0.5rem var(--color-gray-lightest) solid;
		color: var(--color-text-emphasized);
		font-size: 1.125rem;
		font-style: italic;
		font-weight: 400;
		margin-block: 0;
		margin-inline-start: 0;
		padding-inline-start: 1.5rem;
		text-indent: -0.45rem; /* a lil magic number action */

		@supports (hanging-punctuation: first;) {
			hanging-punctuation: first;
			text-indent: 0;
		}
	}

	.expressive-code + :is(h2, h3) {
		padding-block-start: 3rem;
	}
</style>
